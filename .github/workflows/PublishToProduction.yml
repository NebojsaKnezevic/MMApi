name: Publish backend to Production

on:
  workflow_dispatch
  #push:
    #branches:
      #- main

jobs:
  build-and-publish:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Setup .NET
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: '8.0.x'

    - name: Authenticate with Azure Artifacts
      run: |
       dotnet nuget add source --store-password-in-clear-text --name "ACTFeed" --username "AzureArtifacts" --password ${{ secrets.AZURE_ARTIFACTS_PAT }} "https://pkgs.dev.azure.com/ACTprojects/ACT/_packaging/ACTFeed/nuget/v3/index.json"
      env:
       AZURE_ARTIFACTS_PAT: ${{ secrets.AZURE_ARTIFACTS_PAT }}


    - name: Restore dependencies
      run: dotnet restore MajaMayo.Backend.sln
    
    - name: Build
      run: dotnet build MajaMayo.Backend.sln --configuration Release --no-restore
      
    
    - name: Publish MajaMayo.API
      run: dotnet publish MajaMayo.API/MajaMayo.API.csproj --configuration Release --output ./publish/MajaMayo.API

    - name: Publish Tests
      run: dotnet publish MajaMayo.API.Test/MajaMayo.API.Test.csproj --configuration Release --output ./publish/MajaMayo.Tests


    - name: Install sshpass
      run: sudo apt-get install -y sshpass

    - name: Set TIMESTAMP and BACKUP_DIR
      id: vars
      run: |
         echo "TIMESTAMP=$(date +%Y%m%d%H%M%S)" >> $GITHUB_ENV
         echo "BACKUP_DIR=/var/www/api/backup/html_$TIMESTAMP" >> $GITHUB_ENV
    
    
    - name: Set environment variables on remote server
      env:
        SSH_PASSWORD: ${{ secrets.SSH_PASSWORD }}
        SSH_HOST: ${{ secrets.SSH_HOST }}
        SSH_USER: ${{ secrets.SSH_USER }}
        DB_CONNECTION_STRING: ${{ secrets.DB_CONNECTION_STRING }}
        SECURITY_KEY: ${{ secrets.SECURITY_KEY }}
        SMTP_PASSWORD: ${{ secrets.SMTP_PASSWORD }}
        GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
        DG_API_KEY: ${{ secrets.DG_API_KEY }}
      run: |
        sshpass -p "$SSH_PASSWORD" ssh -o StrictHostKeyChecking=no $SSH_USER@$SSH_HOST "
           echo '$SSH_PASSWORD' | sudo -S bash -c 'echo \"DB_CONNECTION_STRING=$DB_CONNECTION_STRING\" >> /etc/environment'
           echo '$SSH_PASSWORD' | sudo -S bash -c 'echo \"SECURITY_KEY=$SECURITY_KEY\" >> /etc/environment'
           echo '$SSH_PASSWORD' | sudo -S bash -c 'echo \"SMTP_PASSWORD=$SMTP_PASSWORD\" >> /etc/environment'
           echo '$SSH_PASSWORD' | sudo -S bash -c 'echo \"GOOGLE_CLIENT_SECRET=$GOOGLE_CLIENT_SECRET\" >> /etc/environment'
           echo '$SSH_PASSWORD' | sudo -S bash -c 'echo \"DG_API_KEY=$DG_API_KEY\" >> /etc/environment'
        "
        
    - name: Deploy to Server
      env:
        SSH_PASSWORD: ${{ secrets.SSH_PASSWORD }}
        SSH_HOST: ${{ secrets.SSH_HOST }}
        SSH_USER: ${{ secrets.SSH_USER }}
      run: |
        # Ensure SSH connection
        sshpass -p "$SSH_PASSWORD" ssh -o StrictHostKeyChecking=no $SSH_USER@$SSH_HOST "echo 'SSH connection successful'"
        
        # Ensure correct permissions on the target directory
        sshpass -p "$SSH_PASSWORD" ssh -o StrictHostKeyChecking=no $SSH_USER@$SSH_HOST "echo $SSH_PASSWORD | sudo -S mkdir -p /var/www/api/html && echo $SSH_PASSWORD | sudo -S chown -R $SSH_USER:$SSH_USER /var/www/api/html"
        
        # Deploy the application
        sshpass -p "$SSH_PASSWORD" rsync -avz -e "ssh -o StrictHostKeyChecking=no" ./publish/MajaMayo.API/ $SSH_USER@$SSH_HOST:/var/www/api/html        

        # Use appsettings from server
        sshpass -p "$SSH_PASSWORD" ssh -o StrictHostKeyChecking=no $SSH_USER@$SSH_HOST "echo $SSH_PASSWORD | sudo -S cp /var/www/api/appsettings.json /var/www/api/html/"
        # Clear Nginx cache
        sshpass -p "$SSH_PASSWORD" ssh -o StrictHostKeyChecking=no $SSH_USER@$SSH_HOST "echo $SSH_PASSWORD | sudo -S rm -rf /var/cache/nginx/*"
        
       
    - name: Deploy Tests to Server
      env:
        SSH_PASSWORD: ${{ secrets.SSH_PASSWORD }}
        SSH_HOST: ${{ secrets.SSH_HOST }}
        SSH_USER: ${{ secrets.SSH_USER }}
      run: |
        sshpass -p "$SSH_PASSWORD" rsync -avz -e "ssh -o StrictHostKeyChecking=no" ./publish/MajaMayo.Tests/ $SSH_USER@$SSH_HOST:/var/www/api/tests

  
  reboot-server:
    runs-on: ubuntu-latest
    needs: build-and-publish

    steps:
    - name: Force Restart Ubuntu server
      env:
        SSH_PASSWORD: ${{ secrets.SSH_PASSWORD }}
        SSH_HOST: ${{ secrets.SSH_HOST }}
        SSH_USER: ${{ secrets.SSH_USER }}
      run: |
        sshpass -p "$SSH_PASSWORD" ssh -o StrictHostKeyChecking=no $SSH_USER@$SSH_HOST "
          echo "$SSH_PASSWORD" | sudo -S reboot -f
        " || true

  wait-and-continue:
    runs-on: ubuntu-latest
    needs: reboot-server

    steps:
    - name: Wait for server to restart
      run: |
        echo "Waiting for server to restart..."
        sleep 60
        for i in {1..30}; do
          if nc -z ${{ secrets.SSH_HOST }} 22; then
            echo "Server is back online."
            break
          fi
          echo "Server is not online yet. Retrying in 10 seconds..."
          sleep 10
        done
        

    - name: Run Tests on Server
      env:
        SSH_PASSWORD: ${{ secrets.SSH_PASSWORD }}
        SSH_HOST: ${{ secrets.SSH_HOST }}
        SSH_USER: ${{ secrets.SSH_USER }}
      run: |
        sshpass -p "$SSH_PASSWORD" ssh -o StrictHostKeyChecking=no $SSH_USER@$SSH_HOST "
          source /etc/profile
          export DOTNET_ROOT=/usr/local/share/dotnet
          export PATH=\$PATH:/usr/local/share/dotnet:/usr/local/share/dotnet/tools
          cd /var/www/api/tests  
          dotnet test --no-build --verbosity normal
        "
      
    - name: Start app on Server
      env:
        SSH_PASSWORD: ${{ secrets.SSH_PASSWORD }}
        SSH_HOST: ${{ secrets.SSH_HOST }}
        SSH_USER: ${{ secrets.SSH_USER }}
      run: |
        sshpass -p "$SSH_PASSWORD" ssh -o StrictHostKeyChecking=no $SSH_USER@$SSH_HOST "
          echo \"$SSH_PASSWORD\" | sudo -S bash -c '
            cd /var/www/api/html && nohup dotnet MajaMayo.API.dll > app.log 2>&1 &
          ' >/dev/null 2>&1 &
          exit
        "
        


    
